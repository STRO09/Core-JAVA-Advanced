package operations;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JOptionPane;

import connect.GetConnection;
import pojo.Emp;

public class OpsImp implements Ops {

	@Override
	public int insertData(int empid, String empname, String contact) {
		// TODO Auto-generated method stub
		int status = 0;
		try {

			PreparedStatement selectstatement = GetConnection.getConnection()
					.prepareStatement("SELECT * FROM empdemojdbc where LOWER(empname)=? OR contact=? OR empid=?");
			selectstatement.setString(1, empname);
			selectstatement.setString(2, contact);
			selectstatement.setInt(3, empid);
			ResultSet resultSet = selectstatement.executeQuery();

			boolean usernameExists = false;
			boolean contactExists = false;
			boolean empidExists = false;

			while (resultSet.next()) {
				if (resultSet.getString("empname").equalsIgnoreCase(empname)) {
					usernameExists = true;
				}
				if (resultSet.getString("contact").equals(contact)) {
					contactExists = true;
				}
				if (resultSet.getInt("empid") == empid) {
					empidExists = true;
				}
			}

			if (usernameExists && contactExists && empidExists) {
				JOptionPane.showMessageDialog(null, "All the fields already exist!");
				return 0;

			} else if (usernameExists && contactExists) {
				JOptionPane.showMessageDialog(null, "Username and contact already exist!");
				return 0;
			} else if (usernameExists && empidExists) {
				JOptionPane.showMessageDialog(null, "Username and ID already exist!");
				return 0;
			} else if (contactExists && empidExists) {
				JOptionPane.showMessageDialog(null, "Contact number and ID already exist!");
				return 0;
			} else if (usernameExists) {
				JOptionPane.showMessageDialog(null, "Username already exists!");
				return 0;
			} else if (contactExists) {
				JOptionPane.showMessageDialog(null, "Contact already exists!");
				return 0;
			} else if (empidExists) {
				JOptionPane.showMessageDialog(null, "ID already exists!");
				return 0;
			}

			PreparedStatement preparedStatement = GetConnection.getConnection()
					.prepareStatement("INSERT INTO empdemojdbc values(?,?,?)");
			preparedStatement.setInt(1, empid);
			preparedStatement.setString(2, empname);
			preparedStatement.setString(3, contact);
			status = preparedStatement.executeUpdate();
			System.out.println("Data inserted successfully");

		} catch (ClassNotFoundException | SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return status;

	}

	@Override
	public int deleteData(int empid) {
		// TODO Auto-generated method stub
		int status = 0;
		try {
			PreparedStatement selectstatement2 = GetConnection.getConnection()
					.prepareStatement("SELECT * FROM empdemojdbc where empid=?");
			selectstatement2.setInt(1, empid);
			ResultSet resultSet = selectstatement2.executeQuery();

			boolean empidExists = false;

			while (resultSet.next()) {
				if (resultSet.getInt("empid") == empid) {
					empidExists = true;
				}
			}

			if (!empidExists) {
				JOptionPane.showMessageDialog(null, "ID does not exist!");
				return 0;
			}

			PreparedStatement preparedStatement = GetConnection.getConnection()
					.prepareStatement("DELETE from empdemojdbc where empid=?");
			preparedStatement.setInt(1, empid);
			status = preparedStatement.executeUpdate();
			System.out.println("Data Deleted Successfully.");
		} catch (ClassNotFoundException | SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return status;

	}

	@Override
	public void updateData(int empid, String contact) {
		// TODO Auto-generated method stub
		PreparedStatement preparedStatement;
		try {
			preparedStatement = GetConnection.getConnection()
					.prepareStatement("UPDATE empdemojdbc SET contact = ? where empid = ?");

			preparedStatement.setString(1, contact);
			preparedStatement.setInt(2, empid);
			preparedStatement.executeUpdate();
			System.out.println("Data Updated Successfully.");
		} catch (ClassNotFoundException | SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@Override
	public List<Emp> showData() {
		List<Emp> employeeList = new ArrayList<>();
		try {
			Statement statement = GetConnection.getConnection().createStatement();
			ResultSet resultSet = statement.executeQuery("SELECT * from empdemojdbc");

			while (resultSet.next()) {
				int empid = resultSet.getInt("empid");
				String empname = resultSet.getString("empname");
				String contact = resultSet.getString("contact");

				employeeList.add(new Emp(empid, empname, contact));
				
				if (employeeList.isEmpty()) {
		            System.out.println("No employee records found.");
		            
		            JOptionPane.showMessageDialog(null, "No employee records found.");
		        }
			}
		} catch (ClassNotFoundException | SQLException e) {
			e.printStackTrace();
		}
		return employeeList;
	}

	@Override
	public Emp searchdata(int empid) {
		// TODO Auto-generated method stub
		Emp emp = null;
		try {
			PreparedStatement preparedStatement = GetConnection.getConnection()
					.prepareStatement("SELECT * from empdemojdbc where empid=?");
			preparedStatement.setInt(1, empid);
			ResultSet resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				emp = new Emp(resultSet.getInt("empid"), resultSet.getString("empname"),
						resultSet.getString("Contact"));
			}
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return emp;
	}

}
